jq-study-notes

#jQuery优点
- 容易上手
- 强大的选择器
- 解决浏览器的兼容
- 完善的事件机制
- 出色的AJAX封装
- 丰富的UI
- 链式操作
- 回调函数
- 迭代器
- 延迟对象
- 队列。。。

#环境搭建
- <script type="text/javascript" src="http://libs.baidu.com/jquery/1.9.1/jquery.js"></script>
- 开发版（开发版本便于代码修改及调试），项目上线发布使用压缩版（因为压缩版本体积更小，效率更快）。
- $(document).ready: 的作用是等页面的文档（document）中的节点都加载完毕后，再执行后续的代码
- $("div").html("您好！通过慕课网学习jQuery才是最佳的途径。"); //在div中显示html文本

# jQuery对象与DOM对象
- var $p = $('#imooc');
- 通过jQuery方法包装后的对象，是一个类数组对象。它与DOM对象完全不同，唯一相似的是它们都能操作DOM。
- 通过jQuery处理DOM的操作，可以让开发者更专注业务逻辑的开发，而不需要我们具体知道哪个DOM节点有那些方法，也不需要关心不同浏览器的兼容性问题，我们通过jQuery提供的API进行开发，代码也会更加精短。

#jQuery对象转化成DOM对象: 1)利用数组下标的方式读取到jQuery中的DOM对象;2)通过jQuery自带的get()方法
- var div = $div[0] //转化成DOM对象; 
- var div = $div.get(0) //通过get方法，转化成DOM对象

#DOM对象转化为JQuery对象： $(DOM)，jQuery方法会把这个DOM对象给包装成一个新的jQuery对象
- 代码样例
var div = document.getElementsByTagName('div'); //dom对象
var $div = $(div); //jQuery对象
var $first = $div.first(); //找到第一个div元素
$first.css('color', 'red'); //给第一个元素设置颜色

#jQuery选择器
## 基础选择器
- 页面的任何操作都需要节点的支撑，开发者如何快速高效的找到指定的节点也是前端开发中的一个重点。
- id选择器：$("#id")
- 类选择器：$(".class")：可以直接对jq元素集合使用css，$(".imooc").css("border", "3px solid red")，不需使用循环处理;
- 元素选择器：$("element")
- 全选择器：$('*')
- 层级选择器：
- 子选择器：$('parent>child')
- 后代选择器：$('ancestor descendent')
- 相邻兄弟选择器：$('prev+next')
- 一般兄弟选择器：$('prev~siblings')
- 选择器组合：$("div p, span p") 表示div下p节点和span下p节点。

##基本筛选选择器
- jQuery提供了一系列的筛选选择器用来更快捷的找到所需的DOM元素。
- $(".div:first")
- $(".div:last")
- $(".div:even")
- $(".div:odd")
- $(".aaron:eq(2)")
- $(".aaron:gt(3)")
- $(".aaron:lt(2)")
- $("input:not(:checked) + p")
- $(".div:header")

##内容筛选选择器
- $(".div:contains('123'))"
- $(".div:has(span)") 
- $("a:parent") //所有当爹的a;
- $("a:empty") //所有空虚的a;

##可见性筛选选择器
- $('#div1:visible')
- $('#div1:hidden')
- CSS display的值是none,width:0;height:0,不占有空间不可见； 
- visibility:hidden;opacity:0，type="hidden"占有空间可见

##属性筛选选择器
(1)$("div[name=p1]")选择div元素中name属性是p1的元素
(2)$("div[name]")选择div元素中所有具有name属性的元素
(3)$("div[name|=a]")选择div元素中name属性的值只包含一个连字符a或以a为前缀且以"-"为分隔的元素（如：name="a-bcd"）
(4)$("div[name~=a]")选择div元素中name属性的值包含字符串a且以空格分隔	元素（如：name="a  b"）
5)$("div[name^=ab]")选择div元素中name属性的值是以字符串ab开头的元素
(6)$("div[name$=ab]")选择div元素中name属性的值是以字符串ab结尾的元素
(7)$("div[name*=ab]")选择div元素中name属性的值包含字符串ab的元素
(8)$("div[name!=ab]")选择div元素中name属性的值不等于字符串ab或者没有name属性的元素
- $("div[name=p1]")和$("div[name*=ab]")是最实用的

##子元素选择器
- $('.first-div a:first-child') //'.first-div a'下的第一个子元素
- $('.first-div a:last-child') //'.first-div a'下的最后一个子元素
- $('.first-div a:only-child') //'.first-div a'下的最后一个子元素
- $('.last-div a:nth-child(2)') //'.first-div a'下的第二个子元素
- $('.last-div a:nth-last-child(2)') //'.first-div a'下的倒数第二个子元素

##表单元素选择器
$(':input') //匹配所有input，textarea, select和button元素
$('input:text') //所有文本框
$('input:password') //所有密码框
$('input:radio') //所有单选按钮
$('input:checkbox') //所有复选框
$('input:submit') //所有提交按钮
$('input:image') //所有图片域
$('input:button') //所有按钮
$('input:file') //所有文件域

##表单对象属性筛选选择器
$('input:enabled') //可用的表单元素
$('input:disabled') //不可用的表单元素
$('input:checked') //被选中的<inout>元素
$('option:selected') // 被选中的<option>元素

##特殊选择器this
- this是JavaScript中的关键字，指的是当前的上下文对象，简单的说就是方法/属性的所有者
- 当然在JavaScript中this是动态的，也就是说这个上下文对象都是可以被动态改变的(可以通过call,apply等方法)
- 同样的在DOM中this就是指向了这个html元素对象，因为this就是DOM元素本身的一个引用
- 通过把$()方法传入当前的元素对象的引用this，把这个this加工成jQuery对象，我们就可以用jQuery提供的快捷方法直接处理样式了
$('p').click(function(){
    //把p元素转化成jQuery的对象
    var $this= $(this) 
    $this.css('color','red')
})

#.attr()与.removeAttr()
- 操作特性的DOM方法主要有3个，getAttribute方法、setAttribute方法和removeAttribute方法，就算如此在实际操作中还是会存在很多问题，这里先不说。
- 而在jQuery中用一个attr()与removeAttr()就可以全部搞定了，包括兼容问题
- attr(传入属性名)：获取属性的值
- attr(属性名, 属性值)：设置属性的值
- attr(属性名,函数值)：设置属性的函数值
- attr(attributes)：给指定元素设置多个属性值，即：{属性名一: “属性值一” , 属性名二: “属性值二” , … … }
- dom中有个概念的区分：Attribute和Property翻译出来都是“属性”，《js高级程序设计》书中翻译为“特性”和“属性”。简单理解，Attribute就是dom节点自带的属性, 例如：html中常用的id、class、title、align
- 而Property是这个DOM元素作为对象，其附加的内容，例如,tagName, nodeName, nodeType,, defaultChecked, 和 defaultSelected 使用.prop()方法进行取值或赋值等
- 获取Attribute就需要用attr，获取Property就需要用prop

#html()方法
- html()方法:获取集合中第一个匹配元素的HTML内容 或 设置每一个匹配元素的html内容，具体有3种用法：
- html() 不传入值，就是获取集合中第一个匹配元素的HTML内容
- html( htmlString )  设置每一个匹配元素的html内容
- html( function(index, oldhtml) ) 用来返回设置HTML内容的一个函数
- .html()内部使用的是DOM的innerHTML属性来处理的，这个操作是针对整个HTML内容（不仅仅只是文本内容）

#text()方法
- 得到匹配元素集合中每个元素的文本内容结合，包括他们的后代，或设置匹配元素集合中每个元素的文本内容为指定的文本内容。具体有3种用法：
- text()结果返回一个字符串，包含所有匹配元素的合并文本
- text( textString ) 用于设置匹配元素内容的文本
- text( function(index, text) ) 用来返回设置文本内容的一个函数

#val()方法
- 主要是用于处理表单元素的值，比如 input, select 和 textarea。
- .val()方法 .val()无参数，获取匹配的元素集合中第一个元素的当前值
- .val( value )，设置匹配的元素集合中每个元素的值
- .val( function ) ，一个用来返回设置值的函数

#.addClass()
- 通过动态改变类名（class），可以让其修改元素呈现出不同的效果。
- 在HTML结构中里，多个class以空格分隔，当一个节点（或称为一个标签）含有多个class时，DOM元素响应的className属性获取的不是class名称的数组，而是一个含有空格的字符串，这就使得多class操作变得很麻烦。
- jQuery开发者也考虑到这种情况，增加了一个.addClass()方法，用于动态增加class类名
- .addClass( className ) : 为每个匹配元素所要增加的一个或多个样式名
- .addClass( function(index, currentClass) ) : 返回一个或更多用空格隔开的要增加的样式名
- .addClass()方法不会替换一个样式类名。它只是简单的添加一个样式类名到元素上

#.removeClass()
- 同样jQuery提供了一个很方便的.removeClass()，从匹配的元素中删除全部或者指定的class
- .removeClass( [className ] )：每个匹配元素移除的一个或多个用空格隔开的样式名
- .removeClass( function(index, class) ) ： index是类数组对象的下标，class是现在当前对象的class值一个函数，返回一个或多个将要被移除的样式名
- 如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除. 
- 如果没有样式名作为参数，那么所有的样式类将被移除

#.toggleClass()
- 在做某些效果的时候，可能会针对同一节点的某一个样式不断的切换，也就是addClass与removeClass的互斥切换，比如隔行换色效果
- jQuery提供一个toggleClass方法用于简化这种互斥的逻辑，通过toggleClass方法动态添加删除Class，一次执行相当于addClass，再次执行相当于removeClass
-.toggleClass( )方法：在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类
- .toggleClass( className )：在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格隔开）样式类名
- .toggleClass( className, switch )：一个布尔值，用于判断样式是否应该被添加或移除
- .toggleClass( [switch ] )：一个用来判断样式类添加还是移除的 布尔值
- .toggleClass( function(index, class, switch) [, switch ] )：用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数
- toggleClass是一个互斥的逻辑，也就是通过判断对应的元素上是否存在指定的Class名，如果有就删除，如果没有就增加
- toggleClass会保留原有的Class名后新增，通过空格隔开

#.css()
- 通过JavaScript获取dom元素上的style属性，我们可以动态的给元素赋予样式属性。
- 在jQuery中我们要动态的修改style属性我们只要使用css()方法就可以实现了
- .css() 方法：获取元素样式属性的计算值或者设置元素的CSS属性
获取：
- .css( propertyName ) ：获取匹配元素集合中的第一个元素的样式属性的计算值
- .css( propertyNames )：传递一组数组，返回一个对象结果
设置：
- .css(propertyName, value )：设置CSS
- .css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理
- .css( properties )：可以传一个对象，同时设置多个样式
- 浏览器属性获取方式不同，在获取某些值的时候jQuery采用统一的处理，比如颜色采用RBG，尺寸采用px
- .css()方法支持驼峰写法与大小写混搭的写法，内部做了容错的处理
- 当一个数只被作为值（value）的时候， jQuery会将其转换为一个字符串，并添在字符串的结尾处添加px，例如 .css("width",50}) 与 .css("width","50px"})一样

#.css()与.addClass()设置样式的区别
- 可维护性：
.addClass()的本质是通过定义class类的样式规则，给元素添加一个或多个类。css方法是通过JavaScript大量代码进行改变元素的样式
通过.addClass()我们可以批量的给相同的元素设置统一规则，变动起来比较方便，可以统一修改删除。如果通过.css()方法就需要指定每一个元素是一一的修改，日后维护也要一一的修改，比较麻烦

- 灵活性：
通过.css()方式可以很容易动态的去改变一个样式的属性，不需要在去繁琐的定义个class类的规则。
一般来说在不确定开始布局规则，通过动态生成的HTML代码结构中，都是通过.css()方法处理的

- 样式值：
.addClass()本质只是针对class的类的增加删除，不能获取到指定样式的属性的值，.css()可以获取到指定的样式值。

- 样式的优先级：
css的样式是有优先级的，当外部样式、内部样式和内联样式同一样式规则同时应用于同一个元素的时候，优先级如下：
- 外部样式 < 内部样式 < 内联样式
.addClass()方法是通过增加class名的方式，那么这个样式是在外部文件或者内部样式中先定义好的，等到需要的时候在附加到元素上
通过.css()方法处理的是内联样式，直接通过元素的style属性附加到元素上的，通过.css方法设置的样式属性优先级要高于.addClass方法

- 总结：
.addClass与.css方法各有利弊，一般是静态的结构，都确定了布局的规则，可以用addClass的方法，增加统一的类规则
如果是动态的HTML结构，在不确定规则，或者经常变化的情况下，一般多考虑.css()方式

#元素的样式存储
- jQuery就提供了一个.data()用于我们存放临时的一些数据

1静态：$.data(ele,key,value);里面三个参数分别代表要存储数据的节点、数据名称、数据内容；

2动态：ele.data(key,value)；表示某个节点存的数据名和数据内容。
