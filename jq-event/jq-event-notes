jq-event-notes
#click
- 用于监听用户单击操作
- 方法一：$ele.click(): 绑定$ele元素，不带任何参数一般是用来指定触发一个事件，用的比较少
- 方法二：$ele.click( handler(eventObject) ): 绑定$ele元素，每次$ele元素触发点击操作会执行回调 handler函数，这样可以针对事件的反馈做很多操作了，方法中的this是指向了绑定事件的元素
- 方法三：$ele.click( [eventData ], handler(eventObject) ): 可以接受一个数据参数，这样的处理是为了解决不同作用域下数据传递的问题
- click事件其实是由mousedown与mouseup 2个动作构成，所以点击的动作只有在松手后才触发

#dbclick事件
- 用于监听用户双击操作。
- dblclick又是由2个click叠加而来的，所以dblclick事件只有在满足以下条件的情况下才能被触发
- 鼠标指针在元素里面时点击。鼠标指针在元素里面时释放。鼠标指针在元素里面时再次点击，点击间隔时间，是系统而定。鼠标指针在元素里面时再次释放。

#mousedown
- 方法一：$ele.mousedown(): 绑定$ele元素，不带任何参数一般是用来指定触发一个事件，可能一般用的比较少
- 方法二：$ele.mousedown( handler(eventObject) ): 绑定$ele元素，每次$ele元素触发点击操作会执行回调 handler函数
- 方法三：$ele.mousedown( [eventData ], handler(eventObject) ): 可以接受一个数据参数，这样的处理是为了解决不同作用域下数据传递的问题

#mouseup
- 同上

#mousemove
- 用交互操作中，经常需要知道用户是否有移动的操作。基于移动的机制可以做出拖动、拖拽一系列的效果出来。
- 针对移动事件，jQuery提供了一个mousemove的快捷方法可以监听用户移动的的操作
- 方法一：$ele.mousemove()： 绑定$ele元素，不带任何参数一般是用来指定触发一个事件，用的比较少
- 方法二：$ele.mousemove( handler(eventObject) )： 绑定$ele元素，每次$ele元素触发点击操作会执行回调 handler函数
- 方法三：$ele.mousemove( [eventData ], handler(eventObject) )：可以接受一个数据参数，这样的处理是为了解决不同作用域下数据传递的问题

#mouseover和mouseout
- 监听用户的移入移出操作
- 方法一：$ele.mouseover()：绑定$ele元素，不带任何参数一般是用来指定触发一个事件，用的比较少
- 方法二：$ele.mouseover( handler(eventObject) )
- 方法三：$ele.mouseover( [eventData ], handler(eventObject) )可以接受一个数据参数，这样的处理是为了解决不同作用域下数据传递的问题

#mouseenter与mouseleave事件
- 检测用户操作鼠标是否有移到元素内部或是元素外部，
- mouseenter事件和mouseover的区别： 关键点就是“冒泡的方式处理问题”
- mouseenter事件只会在绑定它的元素上被调用，而不会在后代节点上被触发

#hover
- 在元素上移进移出切换其换色，一般通过2个事件配合就可以达到，这里用mouseenter与mouseleave，这样可以避免冒泡问题
- jQuery直接提供了一个hover方法，可以便捷处理，只需要在hover方法中传递2个回调函数就可以了，不需要显示的绑定2个事件
- $(selector).hover(handlerIn, handlerOut)

#focusin
- 当一个元素，或者其内部任何一个元素获得焦点的时候，例如：input元素，用户在点击聚焦的时候，如果开发者需要捕获这个动作的时候，jQuery提供了一个focusin事件
- 方法一：$ele.focusin()：绑定$ele元素，不带任何参数一般是用来指定触发一个事件，一般用的比较少
- 方法二：$ele.focusin( handler )：绑定$ele元素，每次$ele元素触发点击操作会执行回调 handler函数
- 方法三：$ele.foucsin( [eventData ], handler ): 使用与方法二一致，不过可以接受一个数据参数，这样的处理是为了解决不同作用域下数据传递的问题

#focusout
- 当一个元素，或者其内部任何一个元素失去焦点的时候，比如input元素，用户在点击失去焦的时候，如果开发者需要捕获这个动作，jQuery提供了一个focusout事件
- 方法同上

#blur与focus事件
- 表单处理事件focusin事件与focusout事件，同样用于处理表单焦点的事件还有blur与focus事件
- 它们之间的本质区别: 是否支持冒泡处理
- focus与blur事件：不支持冒泡，focusin与focusout支持冒泡

#change事件
- <input>元素，<textarea>和<select>元素的值都是可以发生改变的，开发者可以通过change事件去监听这些改变的动作
- input元素：监听value值的变化，当有改变时，失去焦点后触发change事件。对于单选按钮和复选框，当用户用鼠标做出选择时，该事件立即触发。
- select元素： 对于下拉选择框，当用户用鼠标作出选择时，该事件立即触发
- textarea元素： 多行文本输入框，当有改变时，失去焦点后触发change事件

#select事件
- 当 textarea 或文本类型的 input 元素中的文本被选择时，会发生 select 事件。
- select事件只能用于<input>元素与<textarea>元素

#submit事件
- 提交表单是一个最常见的业务需求，比如用户注册，一些信息的输入都是需要表单的提交。
- 同样的有时候开发者需要在表单提交的时候过滤一些的数据、做一些必要的操作（例如：验证表单输入的正确性，如果错误就阻止提交，重新输入）此时可以通过submit事件，监听下提交表单的这个动作
- 通过在<form>元素上绑定submit事件，开发者可以监听到用户的提交表单的的行为
- 具体能触发submit事件的行为：
<input type="submit">
<input type="image">
<button type="submit">
当某些表单元素获取焦点时，敲击Enter（回车键）
上述这些操作下，都可以截获submit事件。

#jQuery键盘事件之keydown()与keyup()事件
- keydown(): 当用户在一个元素上第一次按下键盘上字母键的时候，就会触发它。
- keyup(): 当用户在一个元素上第一次松手键盘上的键的时候，就会触发它。
- 理论上它可以绑定到任何元素，但keydown/keyup事件只是发送到具有焦点的元素上，表单元素总是能获取焦点，所以对于此事件类型表单元素是最合适的。

#keypress()事件
- 在input元素上绑定keydown事件会发现一个问题：每次获取的内容都是之前输入的，当前输入的获取不到
- keydown事件触发在文字还没敲进文本框，这时如果在keydown事件中输出文本框中的文本，得到的是触发键盘事件前的文本，而keyup事件触发时整个键盘事件的操作已经完成，获得的是触发键盘事件后的文本
- keypress事件与keydown和keyup的主要区别: 只能捕获单个字符，不能捕获组合键;无法响应系统功能键（如delete，backspace）;不区分小键盘和主键盘的数字字符
- KeyPress主要用来接收字母、数字等ANSI字符，而 KeyDown 和 KeyUP 事件过程可以处理任何不被 KeyPress 识别的击键。诸如：功能键（F1-F12）、编辑键、定位键以及任何这些键和键盘换档键的组合等。

#on()的多事件绑定
- 基本用法：.on( events ,[ selector ] ,[ data ] )
- $("#elem").click(function(){})  //快捷方式 vs $("#elem").on('click',function(){}) //on方式
- 最大的不同点就是on是可以自定义事件名
- 多个事件绑定同一个函数:  $("#elem").on("mouseover mouseout",function(){ }); 通过空格分离，传递不同的事件名，可以同时绑定多个事件
- 多个事件绑定不同函数: 
$("#elem").on({
    mouseover:function(){},  
    mouseout:function(){},
});
通过空格分离，传递不同的事件名，可以同时绑定多个事件，每一个事件执行自己的回调方法
- 将数据传递到处理程序: 可以通过第二参数（对象），当一个事件被触发时，要传递给事件处理函数的
function greet( event ) {
  alert( "Hello " + event.data.name ); //Hello 慕课网
}
$( "button" ).on( "click", {
  name: "慕课网"
}, greet );

#on()的高级用法
- 委托机制 .on( events ,[ selector ] ,[ data ], handler(eventObject) )
- $("div").on("click","p",fn);
- 事件绑定在最上层div元素上，当用户触发在a元素上，事件将往上冒泡，一直会冒泡在div元素上。如果提供了第二参数，那么事件在往上冒泡的过程中遇到了选择器匹配的元素，将会触发事件回调函数

#卸载事件off()方法
- 通过.on()绑定的事件处理程序, 通过off() 方法移除该绑定\
- 根据on绑定事件的一些特性，off方法也可以通过相应的传递组合的事件名，名字空间，选择器或处理函数来移除绑定在元素上指定的事件处理函数。
- 当有多个过滤参数时，只有与这些参数完全匹配的事件处理函数才会被移除
- 绑定2个事件: $("elem").on("mousedown mouseup",fn)
- 删除一个事件: $("elem").off("mousedown")
- 删除所有事件: $("elem").off("mousedown mouseup")
- 快捷方式删除所有事件，这里不需要传递事件名了，节点上绑定的所有事件讲全部销毁: $("elem").off()

#jQuery event对象的作用
- 在不同浏览器之间事件对象的获取, 以及事件对象的属性都有差异。
- jQuery根据 W3C 标准规范了事件对象，所以在jQuery事件回调方法中获取到的事件对象是经过兼容后处理过的一个标准的跨浏览器对象
- 事件对象是用来记录一些事件发生时的相关信息的对象。事件对象只有事件发生时才会产生，并且只能是事件处理函数内部访问，在所有事件处理函数运行结束后，事件对象就被销毁
- event.target 属性可以是注册事件时的元素，或者它的子元素。通常用于比较 event.target 和 this 来确定事件是不是由于冒泡而触发的。经常用于事件冒泡时处理事件委托
- event.target代表当前触发事件的元素，可以通过当前元素对象的一系列属性来判断是不是我们想要的元素

#jQuery event对象的属性和方法
- event.type：获取事件的类型; 如 "click"事件
- event.pageX 和 event.pageY：获取鼠标当前相对于页面的坐标
- event.preventDefault() 方法：阻止默认行为
- event.stopPropagation() 方法：阻止事件冒泡
- event.which：获取在鼠标单击时，单击的是鼠标的哪个键
- event.which 将 event.keyCode 和 event.charCode 标准化了。event.which也将正常化的按钮按下(mousedown 和 mouseupevents)，左键报告1，中间键报告2，右键报告3
- event.currentTarget : 在事件冒泡过程中的当前DOM元素
- this和event.target的区别：js中事件是会冒泡的，所以this是可以变化的，但event.target不会变化，它永远是直接接受事件的目标DOM元素；
- .this和event.target都是dom对象：如果要使用jquey中的方法可以将他们转换为jquery对象。比如this和$(this)的使用、event.target和$(event.target)的使用；

#jQuery自定义事件之trigger事件
- 类似于mousedown、click、keydown等等这类型的事件都是浏览器提供的，通俗叫原生事件，这类型的事件是需要有交互行为才能被触发。
- 简单来讲就是：根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为
- trigger触发浏览器事件与自定义事件区别？自定义事件对象，是jQuery模拟原生实现的；自定义事件可以传递参数

#jQuery自定义事件之triggerHandler事件
